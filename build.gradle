//======================================================================================================\\

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
plugins {
	id 'com.matthewprenger.cursegradle' version '1.4.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

//======================================================================================================\\

group = 'uk.co.DuelMonster.MinersAdvantage' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'MinersAdvantage'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

//======================================================================================================\\

def mcversion = '1.16.2'
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20200723-1.16.1'
	
    // makeObfSourceJar = false // an Srg named sources jar is made by default. disabled because we do this ourselves.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('../Test_Client_' + mcversion)

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                minersadvantage {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('../Test_Server_' + mcversion)

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                minersadvantage {
                    source sourceSets.main
                }
            }
        }
    }
}

//======================================================================================================\\
repositories {
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
}
dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.2-33.0.21'
    
	compile 'eguilib:eguilib:1.0.2:1.16'  // eguilib:eguilib:VERSION:MCVERSION
}

//======================================================================================================\\

def mod_major
def mod_minor
def mod_revision
def mod_build

def versionPropsFile = file('version.properties')
def Properties versionProps = new Properties()

// Retrieve the version numbers from the props file 
if (versionPropsFile.canRead()) {
    versionProps.load(new FileInputStream(versionPropsFile))
    
    mod_major = versionProps['MAJOR'].toInteger()
    mod_minor = versionProps['MINOR'].toInteger()
    mod_revision = versionProps['REVISION'].toInteger()
    mod_build = versionProps['BUILDNUMBER'].toInteger() + 1
    
    versionProps['BUILDNUMBER'] = mod_build.toString()
    versionProps.store(versionPropsFile.newWriter(), null)
} else {
    throw new FileNotFoundException("Could not read version.properties!")
}
    
version = "$mod_major.$mod_minor.$mod_revision.$mod_build"

//======================================================================================================\\

println "===================================================================================================="
println "  Processing $archivesBaseName build: ${mod_build}"
println "===================================================================================================="

//======================================================================================================\\

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", mcversion

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': mcversion
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

//======================================================================================================\\

version = "${mcversion}-$mod_major.$mod_minor.$mod_revision.$mod_build"

task srcJar(type: Jar) {
	from sourceSets.main.java
	classifier = 'src'
}

task deobfJar(type: Jar) {
	from sourceSets.main.output
    classifier = 'deobf'
}

artifacts {
	archives srcJar, deobfJar
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "${archivesBaseName}",
            "Specification-Vendor": "${archivesBaseName}",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"${archivesBaseName}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

//======================================================================================================\\


task updateRevisionNumber << {
    versionProps['REVISION'] = (mod_revision  + 1).toString()
    versionProps.store(versionPropsFile.newWriter(), null)
}
updateRevisionNumber.finalizedBy build

//======================================================================================================\\

task release(type: Copy) {
	dependsOn updateRevisionNumber
	
	doFirst {
		println "===================================================================================================="
		println "  Building $archivesBaseName release version: ${mcversion}-$version"
		println "===================================================================================================="
	}

	from('build/libs') { include '*.jar' }
	into "../~Releases/"

	doLast {
		println "  $archivesBaseName release built successfully:  " + file("../~Releases/")
		println "===================================================================================================="
	}
}

//======================================================================================================\\

task testRelease(type: Copy) {
	dependsOn build
	
	doFirst {
		println "===================================================================================================="
		println "  Building $archivesBaseName release version: ${mcversion}-$version"
		println "===================================================================================================="
	}

	from('build/libs') { include '*.jar' }
	into "../~TestReleases/"

	doLast {
		println "  $archivesBaseName release built successfully:  " + file("../~TestReleases/")
		println "===================================================================================================="
	}
}

//======================================================================================================\\

def curseId				= '';
def curseForgeApiKey	= '';

def userGradleScript = file("../${System.getProperty("user.name")}.properties") 
if (userGradleScript.exists()) { 
	//apply from: userGradleScript 
	userGradleScript.withReader {
		// Load User Specific Settings.
		def props = new Properties()
		props.load(it)
		
		curseId				= props['curseId'].toString()
		curseForgeApiKey	= props['curseForgeApiKey'].toString()
	}
}

//======================================================================================================\\

tasks.curseforge.onlyIf { curseForgeApiKey }
tasks.curseforge.dependsOn release

if (curseForgeApiKey != '') {
	curseforge {
		apiKey = curseForgeApiKey

		project {
			id = curseId

			changelogType = 'text'
			changelog 	  = file('changelog.txt')

			releaseType = 'release'

			addGameVersion mcversion

			mainArtifact jar
			addArtifact  srcJar
			addArtifact  deobfJar
		}
	}
}

//======================================================================================================\\

task APIKeyTest << {
	println "===================================================================================================="
	println "  Username: " + System.getProperty("user.name")
	println "  CurseForge Id: " + (curseId != '' ? curseId : "!! NOT FOUND !!")
	println "  CurseForge API Key: " + (curseForgeApiKey != '' ? curseForgeApiKey : "!! NOT FOUND !!")
	println "===================================================================================================="
}

//======================================================================================================\\