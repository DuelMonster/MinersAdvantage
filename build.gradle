//======================================================================================================\\

buildscript {
  repositories {
    maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        mavenLocal()
  }
  dependencies {
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
  }
}
plugins {
	id 'com.matthewprenger.cursegradle' version '1.4.0'
}

apply plugin: 'net.minecraftforge.gradle'

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

//======================================================================================================\\

group = 'uk.co.DuelMonster.MinersAdvantage' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'MinersAdvantage'
def mcversion = '1.16.5'

//======================================================================================================\\

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
  // The mappings can be changed at any time, and must be in the following format.
  // Channel:   Version:
  // snapshot   YYYYMMDD   Snapshot are built nightly.
  // stable     #          Stables are built at the discretion of the MCP team.
  // official   MCVersion  Official field/method names from Mojang mapping files
  //
  // You must be aware of the Mojang license when using the 'official' mappings.
  // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
  //
  // Use non-default mappings at your own risk. they may not always work.
  // Simply re-run your setup task after changing the mappings to update your workspace.
  mappings channel: 'official', version: '1.16.5'
  // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

  // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

  // Default run configurations.
  // These can be tweaked, removed, or duplicated as needed.
  runs {
    client {
      workingDirectory project.file('../Test_Client_' + mcversion)

      // Recommended logging data for a userdev environment
      // The markers can be changed as needed.
      // "SCAN": For mods scan.
      // "REGISTRIES": For firing of registry events.
      // "REGISTRYDUMP": For getting the contents of all registries.
      property 'forge.logging.markers', 'REGISTRIES'

      // Recommended logging level for the console
      // You can set various levels here.
      // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
      property 'forge.logging.console.level', 'debug'

      mods {
        minersadvantage {
          source sourceSets.main
        }
      }
    }

    server {
      workingDirectory project.file('../Test_Server_' + mcversion)

      // Recommended logging data for a userdev environment
      // The markers can be changed as needed.
      // "SCAN": For mods scan.
      // "REGISTRIES": For firing of registry events.
      // "REGISTRYDUMP": For getting the contents of all registries.
      property 'forge.logging.markers', 'REGISTRIES'

      // Recommended logging level for the console
      // You can set various levels here.
      // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
      property 'forge.logging.console.level', 'debug'

      mods {
        minersadvantage {
          source sourceSets.main
        }
      }
    }

    data {
      workingDirectory project.file('../Test_Data_' + mcversion)

      // Recommended logging data for a userdev environment
      // The markers can be changed as needed.
      // "SCAN": For mods scan.
      // "REGISTRIES": For firing of registry events.
      // "REGISTRYDUMP": For getting the contents of all registries.
      property 'forge.logging.markers', 'REGISTRIES'

      // Recommended logging level for the console
      // You can set various levels here.
      // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
      property 'forge.logging.console.level', 'debug'

      // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
      args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

      mods {
        minersadvantage {
          source sourceSets.main
        }
      }
    }
  }
}

// Include resources generated by data generators.
sourceSets.main.resources {
  srcDir 'src/generated/resources'
}

//======================================================================================================\\

configurations {
  embed
  compile.extendsFrom(embed)
}
dependencies {
  // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
  // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
  // The userdev artifact is a special name and will get all sorts of transformations applied to it.
  minecraft 'net.minecraftforge:forge:1.16.5-36.2.35'

  // You may put jars on which you depend on in ./libs or you may define them like so..
  // compile "some.group:artifact:version:classifier"
  // compile "some.group:artifact:version"

  // Real examples
  // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
  // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

  // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
  // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

  // These dependencies get remapped to your current MCP mappings
  // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

  // For more info...
  // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
  // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

//======================================================================================================\\

def mod_major
def mod_minor
def mod_revision
def mod_build

def versionPropsFile = file('version.properties')
def Properties versionProps = new Properties()

// Retrieve the version numbers from the props file
if (versionPropsFile.canRead()) {
  versionProps.load(new FileInputStream(versionPropsFile))

  mod_major = versionProps['MAJOR'].toInteger()
  mod_minor = versionProps['MINOR'].toInteger()
  mod_revision = versionProps['REVISION'].toInteger()
  mod_build = versionProps['BUILDNUMBER'].toInteger() + 1

  versionProps['BUILDNUMBER'] = mod_build.toString()
  versionProps.store(versionPropsFile.newWriter(), null)
} else {
  throw new FileNotFoundException("Could not read version.properties!")
}

version = "$mod_major.$mod_minor.$mod_revision.$mod_build"

//======================================================================================================\\

println "===================================================================================================="
println "  Processing $archivesBaseName build: ${mod_build}"
println "===================================================================================================="

//======================================================================================================\\

processResources {
  // // this will ensure that this task is redone when the versions change.
  // inputs.property "version", project.version
  // inputs.property "mcversion", mcversion

  // // replace stuff in mcmod.info, nothing else
  // from(sourceSets.main.resources.srcDirs) {
    // include 'mcmod.info'
    // expand 'version': project.version, 'mcversion': mcversion
  // }

  // // copy everything else except the mcmod.info
  // from(sourceSets.main.resources.srcDirs) {
    // exclude 'mcmod.info'
  // }
}

//======================================================================================================\\

version = "${mcversion}-$mod_major.$mod_minor.$mod_revision.$mod_build"

task srcJar(type: Jar) {
  from sourceSets.main.java
  classifier = 'src'
}

task deobfJar(type: Jar) {
  from sourceSets.main.output
  classifier = 'deobf'
}

artifacts {
  archives srcJar, deobfJar
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
  manifest {
    attributes([
        'Maven-Artifact'          : "${project.group}:${project.archivesBaseName}:${project.version}",
        'Timestamp'               : System.currentTimeMillis(),
        "Specification-Title"     : "${archivesBaseName}",
        "Specification-Vendor"    : "${archivesBaseName}",
        "Specification-Version"   : "1", // We are version 1 of ourselves
        "Implementation-Title"    : project.name,
        "Implementation-Version"  : "${version}",
        "Implementation-Vendor"   : "${archivesBaseName}",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
      ])
  }
}

//======================================================================================================\\


task updateRevisionNumber {
  versionProps['REVISION'] = (mod_revision + 1).toString()
  versionProps.store(versionPropsFile.newWriter(), null)
}
updateRevisionNumber.finalizedBy build

//======================================================================================================\\

task release(type: Copy) {
  dependsOn updateRevisionNumber

  doFirst {
    println "===================================================================================================="
    println "  Building $archivesBaseName release version: $version"
    println "===================================================================================================="
  }

  from('build/libs') { include '*.jar' }
  into "../~Releases/"

  doLast {
    println "  $archivesBaseName release built successfully:  " + file("../~Releases/")
    println "===================================================================================================="
  }
}

//======================================================================================================\\

task testRelease(type: Copy) {
  dependsOn build

  doFirst {
    println "===================================================================================================="
    println "  Building $archivesBaseName release version: $version"
    println "===================================================================================================="
  }

  from('build/libs') { include '*.jar' }
  into "../~TestReleases/"

  doLast {
    println "  $archivesBaseName release built successfully:  " + file("../~TestReleases/")
    println "===================================================================================================="
  }
}

//======================================================================================================\\

def curseId          = '';
def curseForgeApiKey = '';

def userGradleScript = file("../${System.getProperty('user.name')}.properties")
if (userGradleScript.exists()) {
  //apply from: userGradleScript
  userGradleScript.withReader {
    // Load User Specific Settings.
    def props = new Properties()
    props.load(it)

    curseId = props['curseId'].toString()
    curseForgeApiKey = props['curseForgeApiKey'].toString()
  }
}

//======================================================================================================\\

tasks.curseforge.onlyIf { curseForgeApiKey }
tasks.curseforge.dependsOn release

if (curseForgeApiKey != '') {
  curseforge {
    apiKey = curseForgeApiKey

    project {
      id = curseId

      changelogType = 'text'
      changelog = file('changelog.txt')

      releaseType = 'release'

      addGameVersion mcversion

      relations {
        requiredDependency 'mixinbootstrap'
        //requiredDependency 'eguilib'
      }

      mainArtifact jar
      addArtifact srcJar
      addArtifact deobfJar
    }
  }
}

//======================================================================================================\\

task APIKeyTest {
  // println "===================================================================================================="
  println "  Username: " + System.getProperty("user.name")
  println "  CurseForge Id: " + (curseId != '' ? curseId : "!! NOT FOUND !!")
  println "  CurseForge API Key: " + (curseForgeApiKey != '' ? curseForgeApiKey : "!! NOT FOUND !!")
  println "===================================================================================================="
}

//======================================================================================================\\

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact jar
    }
  }
  repositories {
    maven {
      url "file:///${project.projectDir}/mcmodsrepo"
    }
  }
}
