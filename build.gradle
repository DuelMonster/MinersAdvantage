//======================================================================================================\\
buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
//======================================================================================================\\

version = "1.0.14"
group = "co.uk.duelmonster.minersadvantage" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "MinersAdvantage"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.12.2-14.23.2.2611"
    mappings = "snapshot_20180310"
    runDir = "debug"
}

//======================================================================================================\\

def mod_major    = "0";
def mod_minor    = "0";
def mod_revision = "0";
def mod_build    = "0";

File versionFile = file("src/main/java/${group.replace('.','/')}/common/Constants.java")

//======================================================================================================\\

dependencies { }

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

version = getVersionFromJava(versionFile, true)

task versionCheck << {
	println "=================================================="
	println "  Mod Version = $version"
	println "=================================================="
}

task deobfJar(type: Jar) {
	from sourceSets.main.output
    appendix = 'deobf'
}
 
artifacts {
	archives deobfJar
}

String getVersionFromJava(File file, Boolean includeMCVersion) {
	String major    = "0";
	String minor    = "0";
	String revision = "0";
	String build    = "0";
    String prefix   = "public static final int";

    file.eachLine{ String s ->
        s = s.trim();
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 1);
            s = s.replace("Version", "").replace('=', '').replaceAll("  ", " ").trim();
            String[] pts = s.split(" ");

                 if (pts[0].equals("major"))    major    = pts[pts.length - 1];
            else if (pts[0].equals("minor"))    minor    = pts[pts.length - 1];
            else if (pts[0].equals("revision")) revision = pts[pts.length - 1];
            else if (pts[0].equals("build"))    build    = pts[pts.length - 1];
        }
    }

	build = "" + (build.toInteger() + 1);

    return (includeMCVersion ? "${minecraft.version}-" : "") + "$major.$minor.$revision.$build";
}

task updateBuildNumber << {
    def outfile = "";
    def ln = "\n"; //Linux line endings because we're on git!

    versionFile.eachLine{ String s ->
        if (s.matches("^    public static final int buildVersion = [\\d]+;\$"))
            s = "    public static final int buildVersion = ${mod_build};";
        if (s.matches('^    public static final String MC_VERSION = "[^\\"]+";'))
            s = "    public static final String MC_VERSION = \"${minecraft.version}\";";
        outfile += (s+ln);
    }
    versionFile.write(outfile);
}

task release(type: Copy) {
	dependsOn build
	
	from('build/libs') {
		include '*.jar'
	}
	into "~Release/"
}
